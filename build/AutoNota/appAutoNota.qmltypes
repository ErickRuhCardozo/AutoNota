import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "donator.h"
        name: "Donator"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["AutoNota/Donator 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "webView"
            type: "QQuickWebEngineView"
            isPointer: true
            read: "webView"
            write: "setWebView"
            notify: "webViewChanged"
            index: 0
        }
        Property {
            name: "cnpj"
            type: "QString"
            read: "cnpj"
            write: "setCnpj"
            notify: "cnpjChanged"
            index: 1
        }
        Signal { name: "webViewChanged" }
        Signal { name: "cnpjChanged" }
        Method { name: "prepareForDonations" }
        Method {
            name: "loadChanged"
            Parameter { name: "info"; type: "QWebEngineLoadingInfo" }
        }
        Method {
            name: "addAccessKey"
            Parameter { name: "accessKey"; type: "QString" }
        }
    }
    Component {
        file: "loginmanager.h"
        name: "LoginManager"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["AutoNota/LoginManager 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "webView"
            type: "QQuickWebEngineView"
            isPointer: true
            read: "webView"
            write: "setWebView"
            notify: "webViewChanged"
            index: 0
        }
        Property {
            name: "isLoggedIn"
            type: "bool"
            read: "isLoggedIn"
            index: 1
            isReadonly: true
            isConstant: true
        }
        Signal { name: "webViewChanged" }
        Signal { name: "successfullyLoggedIn" }
        Method {
            name: "loadChanged"
            Parameter { name: "info"; type: "QWebEngineLoadingInfo" }
        }
        Method {
            name: "login"
            Parameter { name: "ssn"; type: "QString" }
            Parameter { name: "password"; type: "QString" }
        }
        Method { name: "logout" }
    }
    Component {
        file: "qabstractitemmodel.h"
        name: "QAbstractTableModel"
        accessSemantics: "reference"
        prototype: "QAbstractItemModel"
    }
    Component {
        file: "user.h"
        name: "User"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["AutoNota/User 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "fullName"
            type: "QString"
            read: "fullName"
            write: "setFullName"
            notify: "fullNameChanged"
            index: 0
        }
        Property {
            name: "ssn"
            type: "QString"
            read: "ssn"
            write: "setSsn"
            notify: "ssnChanged"
            index: 1
        }
        Property {
            name: "password"
            type: "QString"
            read: "password"
            write: "setPassword"
            notify: "passwordChanged"
            index: 2
        }
        Signal { name: "fullNameChanged" }
        Signal { name: "ssnChanged" }
        Signal { name: "passwordChanged" }
    }
    Component {
        file: "usersitemmodel.h"
        name: "UsersItemModel"
        accessSemantics: "reference"
        prototype: "QAbstractTableModel"
        exports: ["AutoNota/UsersItemModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "UserRole"
            values: ["NameRole", "SsnRole", "PasswordRole", "ObjectRole"]
        }
        Method {
            name: "addUser"
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "ssn"; type: "QString" }
            Parameter { name: "password"; type: "QString" }
        }
        Method { name: "loadUsers" }
        Method { name: "saveUsers" }
        Method { name: "createUsersFile" }
    }
}
